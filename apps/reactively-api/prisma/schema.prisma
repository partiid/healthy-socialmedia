// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-3.0.x"]

}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id_user  Int           @id @default(autoincrement())
  username String        @unique()
  password String
  email    String        @unique()
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt()
  posts    Post[]
  postsLike    PostLike[]
  userTags  UserTag[]
  comments Comment[]
  commentsLike CommentLike[]
  details  UserDetails?
}

model UserDetails {
  id_user_details Int     @id @default(autoincrement())
  bio             String?
  id_user         Int     @unique
  user            User    @relation(fields: [id_user], references: [id_user], onDelete: Cascade)
  id_image        Int?    @unique
  image           Image?  @relation(fields: [id_image], references: [id_image])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model UserTag {
  id_user Int
  id_tag  Int
  user    User @relation( fields: [id_user], references: [id_user])
  tag     Tag  @relation( fields: [id_tag], references: [id_tag])

  @@id([id_user, id_tag])
}

model Image {
  id_image Int           @id @default(autoincrement())
  path     String
  posts    Post[]
  users    UserDetails[]
  createdAt DateTime     @default(now())
}

model Post {
  id_post  Int        @id @default(autoincrement())
  content  String
  title    String?
  id_user  Int
  user     User       @relation(fields: [id_user], references: [id_user])
  id_image Int?
  image    Image?     @relation(fields: [id_image], references: [id_image])
  comments Comment[]
  likes    PostLike[]
  tags  PostTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([id_user], name: "post_author_idx")
}

model PostLike {
  id_post_like Int  @id @default(autoincrement())
  id_post      Int
  id_user      Int
  user         User @relation(fields: [id_user], references: [id_user])
  post         Post @relation(fields: [id_post], references: [id_post], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@index([id_post, id_user], name: "post_like_unique_idx")
}

model CommentLike {
  id_comment_like Int     @id @default(autoincrement())
  id_user         Int
  id_comment      Int
  user            User    @relation(fields: [id_user], references: [id_user])
  comment         Comment @relation(fields: [id_comment], references: [id_comment], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@index([id_comment, id_user], name: "comment_like_unique_idx")
}

model Comment {
  id_comment Int           @id @default(autoincrement())
  id_post    Int
  id_user    Int
  post       Post          @relation(fields: [id_post], references: [id_post], onDelete: Cascade)
  content    String
  user       User          @relation(fields: [id_user], references: [id_user])
  likes      CommentLike[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  @@index([id_post, id_user], name: "comment_post_author_idx" )
}

model PostTag {
  id_post Int
  id_tag  Int
  post    Post @relation(fields: [id_post], references: [id_post], onDelete: Cascade)
  tag     Tag  @relation(fields: [id_tag], references: [id_tag], onDelete: Cascade)

  @@id([id_post, id_tag])
}

model Tag {
  id_tag      Int       @id @default(autoincrement())
  name        String
  posts       PostTag[]
  users      UserTag[]
  
  
}

// model Notification {
//   id_notification Int     @id @default(autoincrement())
//   id_action         Int
//   id_user_sender Int
//   id_user_receiver Int 
//   text           String
//   userSender            User    @relation(fields: [id_user_sender], references: [id_user])
//   userReceiver            User    @relation(fields: [id_user_receiver], references: [id_user])
//   createdAt DateTime @default(now())
//   @@index([id_user_sender, id_user_receiver], name: "notification_unique_idx")
// }

// model Action {
//   id_action Int     @id @default(autoincrement())
//   id_resource Int 
//   name      String
//   users     UserAction[]
//   resources ResourceAction[]
  
  
// }
// model Resource {
//   id_resource Int     @id @default(autoincrement())
//   name      String
//   actions   Action[]
  
  
// }

// model UserAction {
//   id_user_action Int @id @default(autoincrement())
//   id_user        Int
//   id_action      Int
//   user           User   @relation(fields: [id_user], references: [id_user])
//   action         Action @relation(fields: [id_action], references: [id_action])
//   createdAt DateTime @default(now())
//   @@index([id_user, id_action], name: "user_action_unique_idx")
// }